import os
Import('env', "objects")

# Add the library paths 
#env.Append(LIBPATH=['../third_party/glfw/lib-vc2010-64']) 
env.Append(LIBPATH=['../third_party/glfw/lib-mingw-w64']) 
# # Link the libraries 
#env.Append(LIBS=['glfw3.lib', 'opengl32.lib', 'gdi32.lib', 'shell32.lib'])
env.Append(LIBS=['glfw3', 'opengl32', 'gdi32', 'shell32', 'setupapi', 'uuid'])

env.Append(CPPPATH=[
    "#source/app/serial_monitor/inc/",
    "#source/app/log_viewer/inc/",
    "#source/app/main/inc/",
    ])

env.Append(CXXFLAGS=[
    '-Wpedantic',
    '-pedantic-errors',
    '-Wall',
    '-Wextra',
    '-Wcast-align',
    '-Wcast-qual',
    '-Wfloat-equal',
    '-Wformat=2',
    '-Wlogical-op',
    '-Wmissing-declarations',
    '-Wmissing-include-dirs',
    '-Wpointer-arith',
    '-Wredundant-decls',
    '-Wsequence-point',
    '-Wshadow',
    '-Wswitch',
    '-Wundef',
    '-Wunreachable-code',
    '-Wunused-but-set-parameter',
    '-Wwrite-strings'
])

#env.Append(CCFLAGS=['/MD', '/nologo', '/std:c++20', '/EHsc', '/W4', '/diagnostics:column', '/diagnostics:caret'])

#!sources = [
#!        'src/main.cpp',
#!        'src/settings.cpp',
#!        'src/log_reader.cpp',
#!        'src/data_cursors.cpp',
#!        'src/main_window.cpp',
#!        "src/licenses.cpp",
#!        "src/layout.cpp",
#!        "src/serial_back.cpp",
#!        "src/serial_front.cpp",
#!        "src/data_logger.cpp",
#!        "src/performance_analysis.cpp",
#!]
sources  = Glob("src/*.cpp")
sources += Glob("serial_monitor/src/*.cpp")
sources += Glob("log_viewer/src/*.cpp")
sources += Glob("main/src/*.cpp")

sources_lint = [
    'settings.cpp',
    'log_reader.cpp',
    'data_logger.cpp',
]

env.Tool('compilation_db')
env.CompilationDatabase()
def clang_tidy_action(target, source, env):
    src = str(source[0])
    stamp = str(target[0])
    includes = ' '.join(f"-I{str(env.Dir(p))}" for p in env.get('CPPPATH', []))
    cmd = f"clang-tidy -p . {src} --quiet --extra-arg=-std=c++20 --extra-arg=-stdlib=libstdc++ -- {includes}"
    result = os.system(cmd)
    if result == 0:
        with open(stamp, 'w') as f:
            f.write("tidy OK\n")
    return result
def tidy_message(target, source, env):
    return f"Running clang-tidy on {source[0]}"
tidy_builder = Builder(action=Action(clang_tidy_action, strfunction=tidy_message))
env.Append(BUILDERS={'ClangTidy': tidy_builder})

if not GetOption('no_lint'):
    for src in sources_lint:
        tidy_stamp = src + '.tidy.stamp'
        env.ClangTidy(tidy_stamp, src)

to_release = [
    "jelkiview.exe",
    "#resources/",
    "#imgui.ini",
]
release_targets = []
for item in to_release:
    release_targets.append(env.Install("release", item))

env.Alias("release", release_targets)

env.Program(
    target='jelkiview', 
    source=sources + objects
)